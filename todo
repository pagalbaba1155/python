from telegram.ext import Updater, CommandHandler, CallbackContext, CallbackQueryHandler
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
import random
import schedule
import time

# Replace 'TOKEN' with your actual Telegram Bot token
TOKEN = "6572544828:AAHzTIfHPXaysGov-mQLpQpcKRE__MUSltY"

# Dictionaries to store user tasks and completed tasks
tasks = {}
completed_tasks = {}


# Define the /start command handler
def start(update: Update, context: CallbackContext) -> None:
    update.message.reply_text("🌟 Welcome to the To-Do Bot! Use /add to add tasks.")

# Define the /add command handler
def add_task(update: Update, context: CallbackContext) -> None:
    task_text = ' '.join(context.args).split(',')
    task_text = [task.strip() for task in task_text if task.strip()]

    if task_text:
        user_id = update.effective_chat.id
        if user_id not in tasks:
            tasks[user_id] = []
        tasks[user_id].extend(task_text)

        task_list = '\n'.join([f"✅ {task}" for task in task_text])
        update.message.reply_text(f'✅ Tasks added:\n{task_list}')
    else:
        update.message.reply_text('❌ Please provide tasks. Example: /add 🚰 drink water, 🍺 drink beer, 📚 do homework')

# Define the /list command handler
def list_tasks(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_chat.id
    task_list = tasks.get(user_id, [])
    if task_list:
        keyboard = [[InlineKeyboardButton(f"{index + 1}. {task} ✅", callback_data=f'complete_{index}')] for index, task in enumerate(task_list)]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text("📋 Your tasks:", reply_markup=reply_markup)
    else:
        update.message.reply_text("📋 Your to-do list is empty.")

# Define the inline button callback handler
def complete_task(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    user_id = query.message.chat_id
    task_index = int(query.data.split('_')[1])

    if user_id in tasks and 0 <= task_index < len(tasks[user_id]):
        completed_task = tasks[user_id].pop(task_index)

        if user_id not in completed_tasks:
            completed_tasks[user_id] = []
        completed_tasks[user_id].append(completed_task)

        task_list = tasks[user_id]
        if task_list:
            numbered_tasks = [f"{index + 1}. {task}" for index, task in enumerate(task_list)]
            task_text = '\n'.join(numbered_tasks)
            update.callback_query.edit_message_text(f'Tasks remaining:\n{task_text}')
        else:
            update.callback_query.edit_message_text("All tasks completed. Your to-do list is empty.")

        query.answer(f'✅ Task completed: {completed_task}')

# Define the /reminder command handler
def reminder(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_chat.id
    task_list = tasks.get(user_id, [])

    if task_list:
        random_task = random.choice(task_list)
        update.message.reply_text(f"⏰ Reminder: Don't forget to {random_task}")
    else:
        update.message.reply_text("📋 Your to-do list is empty.")

# Define a function to send reminders at intervals
def send_reminder_job(context: CallbackContext):
    for user_id, task_list in tasks.items():
        if task_list:
            random_task = random.choice(task_list)
            context.bot.send_message(user_id, f"⏰ Reminder: Don't forget to {random_task}")

# Define the /help command handler
def help_command(update: Update, context: CallbackContext) -> None:
    help_text = (
        "Welcome to the To-Do Bot! 🌟\n"
        "Here are the available commands:\n\n"
        "/start - Start the bot and receive a welcome message.\n"
        "/add <task1>, <task2>, ... - Add multiple tasks to your to-do list. Example: /add 🚰 drink water, 🍺 drink beer, 📚 do homework\n"
        "/list - View your current to-do list and mark tasks as completed. You can complete tasks by clicking the buttons.\n"
        "/reminder - Get a reminder for a random remaining task."
    )
    update.message.reply_text(help_text)

# Set up the updater and dispatcher with use_context=True
updater = Updater(token=TOKEN, use_context=True)
dispatcher = updater.dispatcher  # Create the dispatcher instance

# Register the command handlers
start_handler = CommandHandler("start", start)
add_task_handler = CommandHandler("add", add_task, pass_args=True)
list_tasks_handler = CommandHandler("list", list_tasks)
help_handler = CommandHandler("help", help_command)
reminder_handler = CommandHandler("reminder", reminder)

# Register the inline button handler
dispatcher.add_handler(CallbackQueryHandler(complete_task))

# Add all command handlers to the dispatcher
dispatcher.add_handler(start_handler)
dispatcher.add_handler(add_task_handler)
dispatcher.add_handler(list_tasks_handler)
dispatcher.add_handler(help_handler)
dispatcher.add_handler(reminder_handler)

# Schedule the reminder job every 1.5 hours between 8 am to 10 pm
schedule.every().day.at("08:00").do(send_reminder_job)
schedule.every().day.at("09:30").do(send_reminder_job)
schedule.every().day.at("11:00").do(send_reminder_job)
# Add more scheduled times as needed

# Start the bot
updater.start_polling()

# Keep the bot running and check the scheduled jobs
while True:
    schedule.run_pending()
    time.sleep(1)
